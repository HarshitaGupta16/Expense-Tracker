{"ast":null,"code":"var _jsxFileName = \"E:\\\\JavaScript\\\\GitHub\\\\Expense-Tracker\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Expenses from \"./components/Expenses/Expenses\";\nimport NewExpense from './components/NewExpense/NewExpense';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DUMMY_EXPENSES = [{\n  id: 'e1',\n  title: 'Toilet Paper',\n  amount: 94.12,\n  date: new Date(2020, 7, 14) // add year then month then numbr of days in that month\n\n}, {\n  id: 'e2',\n  title: 'New TV',\n  amount: 799.49,\n  date: new Date(2021, 2, 12)\n}, {\n  id: 'e3',\n  title: 'Car Insurance',\n  amount: 294.67,\n  date: new Date(2021, 2, 28)\n}, {\n  id: 'e4',\n  title: 'New Desk (Wooden)',\n  amount: 450,\n  date: new Date(2021, 5, 12)\n}];\n\nfunction App() {\n  _s();\n\n  const [expenses, setExpenses] = useState(DUMMY_EXPENSES);\n\n  const addExpenseHandler = expense => {\n    setExpenses(prevExpenses => {\n      return [expense, ...prevExpenses]; // here we return an array with expense as first element which we are \n      // getting in this function as argument and add the previous expenses\n      // by using spread operator\n      // this is how state is updated\n    });\n  }; // This is an alternative to the JSX code and that's why we had to import React \n  // because this is the internal code which automatically creted when you use JSX\n  // in React.createElement we pass first the element then propertires or attributes\n  // and then the content inside that opening and closing of that element.\n  // return React.createElement(\n  //   'div', \n  //   {}, \n  //   React.createElement('h2', {}, \"Let's get started!\"),\n  //   React.createElement(Expenses, {items: expenses})\n  //   );\n  // From above JSX alternative we can understand why we have to \n  // return a wrapping element as a root JSX element. You can return array\n  //  of elements but we want here to return 2 separate side by side elements\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NewExpense, {\n      onAddExpense: addExpenseHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Expenses, {\n      items: expenses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"vWte2SAXNm+1bDonaLQzZSzOmNc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["E:/JavaScript/GitHub/Expense-Tracker/src/App.js"],"names":["React","useState","Expenses","NewExpense","DUMMY_EXPENSES","id","title","amount","date","Date","App","expenses","setExpenses","addExpenseHandler","expense","prevExpenses"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;;AAEA,MAAMC,cAAc,GAAG,CACrB;AACEC,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,cAFT;AAGEC,EAAAA,MAAM,EAAE,KAHV;AAIEC,EAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB,CAJR,CAKE;;AALF,CADqB,EAQrB;AAAEJ,EAAAA,EAAE,EAAE,IAAN;AAAYC,EAAAA,KAAK,EAAE,QAAnB;AAA6BC,EAAAA,MAAM,EAAE,MAArC;AAA6CC,EAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAAnD,CARqB,EASrB;AACEJ,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,eAFT;AAGEC,EAAAA,MAAM,EAAE,MAHV;AAIEC,EAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAJR,CATqB,EAerB;AACEJ,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,mBAFT;AAGEC,EAAAA,MAAM,EAAE,GAHV;AAIEC,EAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAJR,CAfqB,CAAvB;;AAuBA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAACG,cAAD,CAAxC;;AAEA,QAAMS,iBAAiB,GAAGC,OAAO,IAAI;AACnCF,IAAAA,WAAW,CAACG,YAAY,IAAI;AAC1B,aAAO,CAACD,OAAD,EAAU,GAAGC,YAAb,CAAP,CAD0B,CAE1B;AACA;AACA;AACA;AACD,KANU,CAAX;AAOD,GARD,CAHa,CAaf;AACA;AACA;AACA;AAEE;AACA;AACA;AACA;AACA;AACA;AAGF;AACA;AACA;;;AACE,sBACE;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,YAAY,EAAEF;AAA1B;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAIF;AAAnB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GAnCQD,G;;KAAAA,G;AAqCT,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport Expenses from \"./components/Expenses/Expenses\";\r\nimport NewExpense from './components/NewExpense/NewExpense';\r\n\r\nconst DUMMY_EXPENSES = [\r\n  {\r\n    id: 'e1',\r\n    title: 'Toilet Paper',\r\n    amount: 94.12,\r\n    date: new Date(2020, 7, 14),\r\n    // add year then month then numbr of days in that month\r\n  },\r\n  { id: 'e2', title: 'New TV', amount: 799.49, date: new Date(2021, 2, 12) },\r\n  {\r\n    id: 'e3',\r\n    title: 'Car Insurance',\r\n    amount: 294.67,\r\n    date: new Date(2021, 2, 28),\r\n  },\r\n  {\r\n    id: 'e4',\r\n    title: 'New Desk (Wooden)',\r\n    amount: 450,\r\n    date: new Date(2021, 5, 12),\r\n  },\r\n];\r\n\r\nfunction App() {\r\n  const [expenses, setExpenses] = useState(DUMMY_EXPENSES);\r\n\r\n  const addExpenseHandler = expense => {\r\n    setExpenses(prevExpenses => {\r\n      return [expense, ...prevExpenses];\r\n      // here we return an array with expense as first element which we are \r\n      // getting in this function as argument and add the previous expenses\r\n      // by using spread operator\r\n      // this is how state is updated\r\n    });\r\n  };\r\n\r\n// This is an alternative to the JSX code and that's why we had to import React \r\n// because this is the internal code which automatically creted when you use JSX\r\n// in React.createElement we pass first the element then propertires or attributes\r\n// and then the content inside that opening and closing of that element.\r\n\r\n  // return React.createElement(\r\n  //   'div', \r\n  //   {}, \r\n  //   React.createElement('h2', {}, \"Let's get started!\"),\r\n  //   React.createElement(Expenses, {items: expenses})\r\n  //   );\r\n\r\n\r\n// From above JSX alternative we can understand why we have to \r\n// return a wrapping element as a root JSX element. You can return array\r\n//  of elements but we want here to return 2 separate side by side elements\r\n  return (\r\n    <div>\r\n      <NewExpense onAddExpense={addExpenseHandler}/>\r\n      <Expenses items = {expenses} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}